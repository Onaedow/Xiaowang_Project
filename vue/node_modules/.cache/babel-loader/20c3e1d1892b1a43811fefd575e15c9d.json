{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // config.headers['token'] = user.token;  // 设置请求头\n  // 取出sessionStorage里面的缓存用户信息\n\n  const userJson = sessionStorage.getItem(\"user\");\n\n  if (!userJson) {\n    router.push(\"/login\");\n  } else {\n    let user = JSON.parse(userJson);\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","userJson","sessionStorage","getItem","push","user","JSON","parse","token","error","Promise","reject","response","res","data","responseType","console","log"],"sources":["/Users/dziunzrirdjin/Desktop/springboot+vue/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\n\nconst request = axios.create({\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // config.headers['token'] = user.token;  // 设置请求头\n    // 取出sessionStorage里面的缓存用户信息\n    const userJson = sessionStorage.getItem(\"user\")\n    if (!userJson) {\n        router.push(\"/login\")\n    } else {\n        let user = JSON.parse(userJson);\n        config.headers['token'] = user.token;  // 设置请求头\n    }\n\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAE,MADgB;EACP;EAClBC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiCC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;EACA;;EACA,MAAMC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAjB;;EACA,IAAI,CAACF,QAAL,EAAe;IACXT,MAAM,CAACY,IAAP,CAAY,QAAZ;EACH,CAFD,MAEO;IACH,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,QAAX,CAAX;IACAF,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BK,IAAI,CAACG,KAA/B,CAFG,CAEoC;EAC1C;;EAED,OAAOT,MAAP;AACH,CAdD,EAcGU,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBD,E,CAkBA;AACA;;AACAhB,OAAO,CAACI,YAAR,CAAqBe,QAArB,CAA8Bd,GAA9B,CACIc,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;EACA,IAAIF,QAAQ,CAACb,MAAT,CAAgBgB,YAAhB,KAAiC,MAArC,EAA6C;IACzC,OAAOF,GAAP;EACH,CALO,CAMR;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzBA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWM,GAAX,CAAH,GAAqBA,GAA9B;EACH;;EACD,OAAOA,GAAP;AACH,CAZL,EAaIJ,KAAK,IAAI;EACLO,OAAO,CAACC,GAAR,CAAY,QAAQR,KAApB,EADK,CACsB;;EAC3B,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBL;AAoBA,eAAehB,OAAf"},"metadata":{},"sourceType":"module"}